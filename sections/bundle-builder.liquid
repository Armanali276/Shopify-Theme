<style>
  .bundle-products .title {
    margin: 0;
  }
  .bundle-products summary {
    background-color: #eee;
    padding: 15px;
    display: flex;
    justify-content: space-between;
  }
  .bundle-products summary svg {
    max-width: 30px;
  }
  .bundle-products[open] .icon.icon-minus {
    display: block;
  }
  .bundle-products .icon.icon-minus,
  .bundle-products[open] .icon.icon-plus {
    display: none;
  }
  .bundle-products {
    margin-bottom: 10px;
  }
  .group-item img {
    width: 100%;
    display: block;
    object-fit: contain;
    aspect-ratio: 4 / 4;
  }
  .group-item {
    width: calc(100% / 4 - 10px);
  }
  .group-inner {
    gap: 12px;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
  }
  .item-info {
    text-align: center;
  }
  .item-info * {
    margin: 0;
  }
  #bundles-form {
    position: fixed;
    bottom: 0;
    background: rgb(0 0 0 / 50%);
    width: 100%;
    min-height: 100px;
    z-index: 9;
    padding: 20px;
    text-align: end;
  }
</style>
<div class="page-width">
  {% for block in section.blocks %}
    <details class="group--{{ forloop.index }} bundle-products" {% if forloop.first %}open{% endif %}>
      <summary>
        <h2 class="title">{{ block.settings.heading }}</h2>
        {% render 'icon-minus' %}
        {% render 'icon-plus' %}
      </summary>
      <div class="group-inner">
        {% for product in collections[block.settings.collection].products %}
          {% assign variant = product.selected_or_first_available_variant %}
          <div class="group-item" data-variantid="{{ variant.id }}">
            <div class="item-image">
              <img src="{{ product.featured_image | img_url: '1000x' }}" width="" height="" loading="lazy" alt="">
            </div>
            <div class="item-info">
              <h2>{{ product.title }}</h2>
              <p>{{ variant.price | money }}</p>
              <button class="button button--secondary">ADD</button>
            </div>
          </div>
        {% endfor %}
      </div>
    </details>
  {% endfor %}
</div>

<form id="bundles-form">
  <div class="item_ids"></div>
  <button class="button">Add to Cart</button>
</form>
<script>
  let form = document.querySelector('#bundles-form');
  
</script>
{% comment %} 
  <script>
     document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.group-item button').forEach(button => {
          button.addEventListener('click', function() {
            if (!this.classList.contains('added')) {
              let newInput = document.createElement('input');
              let variantId = this.closest('.group-item').dataset.variantid;
              newInput.type = 'hidden';
              newInput.name = 'item_ids[]';
              newInput.value = variantId;
              console.log(newInput);
              document.querySelector('.item_ids').appendChild(newInput);
              this.textContent = 'ADDED';
              this.classList.add('added');
            }
          });
        });
  
        const form = document.querySelector("#bundles-form");
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          const ItemsIds = []
          form.querySelectorAll('.item_ids input').forEach(input => {
            ItemsIds.push(input.value)
          })
          const bundleId = new Date().getTime();
          const items = ItemsIds.map(id => {
            return {
              id: id,
              quantity: 1,
              properties: {
                _bundleId: bundleId
              }
            };
          });
          try {
            const response = await fetch("/cart/add.js", {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                items: items
              })
            });
  
            if (response.ok) {
              window.location.href = '/cart';
            } else {
              console.error('Failed to add items to the cart:', response.statusText);
            }
          } catch (error) {
            console.error('Error:', error);
          }
        });
      });
  </script>
{% endcomment %}

{% schema %}
  {
    "name": "Bundle Builder",
    "settings": [],
    "blocks": [
      {
        "type": "block",
        "name": "Block",
        "settings": [
          {
            "type": "text",
            "id": "heading",
            "label": "Title"
          },
          {
            "type": "collection",
            "id": "collection",
            "label": "Collection"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Bundle Builder"
      }
    ]
  }
{% endschema %}